########################

#       Imports        #

########################


from circuit import Circuit
from util import if_else, bit_compose


################################

#        Functions def         #

################################


def concatenate_to_hash(tbl_l):
    """ Concatenate an 'Array' of 'sbits'.

    Note: we assume the following parameters (hardcoded)
        lenght of tbl_l = 64
        length of sbits = 8 (in the implementation we use sb9 
                             as the system considers signed
                             numbers)
    
    :param tbl_l: Array of sbits.

    :output: A 512-`sbits` element."""

    # Step 1: initialization
    sb512 = sbits.get_type(512)
    bits_l = []

    # Step 2: concatenate the bit decoposition of all individual 
    # elements from tbl_l
    for i in range(0, 64):
        # Concatenate in reversed order
        val = tbl_l[63-i] 
        bits_l += val.bit_decompose()[:8]

    return sb512.bit_compose(bits_l)


def compute_tbl_entry_sha256(secret):
    """ Compute the SHA256 of secret
    
    :param secret: a preprocessed element to be hashed (svi512)
                    Preprocess: padding step.
    """
    
    # Step 1: import sha256 circuit
    sha256 = Circuit('sha256')

    # Step 2: initialize state variable 
    siv256 = sbitintvec.get_type(256)
    state = siv256(0x6a09e667bb67ae853c6ef372a54ff53a510e527f9b05688c1f83d9ab5be0cd19)

    # Step 3: run circuit
    result = sha256(secret, state)
    res = result.elements()[0]

    # Step 4: parse res as four 64-bit sint 
    trunc_64_0 = res.TruncPr(64,0)
    trunc_128_64 = res.TruncPr(128,64)
    trunc_192_128 = res.TruncPr(192,128)
    trunc_256_192 = res.TruncPr(256,192)

    sint_trunc_64_0 = sint.bit_compose(sint(trunc_64_0))
    sint_trunc_128_64 = sint.bit_compose(sint(trunc_128_64))
    sint_trunc_192_128 = sint.bit_compose(sint(trunc_192_128))
    sint_trunc_256_192 = sint.bit_compose(sint(trunc_256_192))

    # Step 5: save truncated result to array
    hash_array = Array(4, sint)
    hash_array[0] = sint_trunc_64_0
    hash_array[1] = sint_trunc_128_64
    hash_array[2] = sint_trunc_192_128
    hash_array[3] = sint_trunc_256_192

    return hash_array




########################

#        Input         #

########################

# Initizalize hardcoded parameters
len_of_entry = 10      # Length of each entry (bytes)
# n_of_columns = 5       # Number of columns
n_of_lines = 15         # Number of lines


###                  Party 0                   ###

user_input_id = sint.get_input_from(0)
# user_input_column = sint.get_input_from(0)

###--------------------------------------------###


###                  Party 1                   ###

sb9 = sbits.get_type(9)
sb512 = sbits.get_type(512)

tbl = Matrix(n_of_lines, 64, sb9)

for i in range(0, n_of_lines):
    tbl[i].input_from(1)

###--------------------------------------------###



################################

#        Search & Hash         #

################################


# Initialize types
siv512 = sbitintvec.get_type(512)    


# Initialize tmp variables
tmp_lfnd = sintbit(0)  # temporary register to cover line found
fnl_lfnd = sintbit(0)  # final register to cover line found

# tmp_cfnd = sintbit(0)  # temporary register to cover column found
# fnl_cfnd = sintbit(0)  # final register to cover column found


# Initialize outputs
output_hash = Array(4, sint)
output_query = Array(len_of_entry, sint)


for i in range(n_of_lines):
    
    tmp_lfnd = i == user_input_id
    fnl_lfnd = fnl_lfnd | tmp_lfnd

    # Compute hash of line i
    # line_in_bits = concatenate_to_hash(tbl[i])
    # secret_line_in_bits = siv512(line_in_bits)
    # cmp_hash = compute_tbl_entry_sha256(secret_line_in_bits)

    #for j in range(n_of_columns):

        #tmp_cfnd = j == user_input_column
        #fnl_cfnd = fnl_cfnd | tmp_cfnd

    match =  tmp_lfnd

    # Prepare output for query
    for k in range(len_of_entry):
        val = sint.bit_compose(sint(tbl[i][1*len_of_entry + k]))
        output_query[k] = if_else(match, val, output_query[k])

    # Prepare output for hash
    # output_hash[0] = if_else(match, cmp_hash[0], output_hash[0])
    # output_hash[1] = if_else(match, cmp_hash[1], output_hash[1])
    # output_hash[2] = if_else(match, cmp_hash[2], output_hash[2])
    # output_hash[3] = if_else(match, cmp_hash[3], output_hash[3])


################################

#         Print output         #

################################

for k in range(len_of_entry):
    print_ln("The %s th letter of the query output is the following: %s", k, output_query[k].reveal())

# print_ln("hash[0:64] = %s", output_hash[0].reveal())
# print_ln("hash[64:128] = %s", output_hash[1].reveal())
# print_ln("hash[128:192] = %s", output_hash[2].reveal())
# print_ln("hash[192:256] = %s", output_hash[3].reveal())





"""

#if fnl_lfnd:
#	raise CompilerError('ID (line) not found.')

#if fnl_lfnd:
#	raise CompilerError('Type (column) not found.')

# Print result
#print_ln_to(0, "This is my result: %s", output_query.reveal_to(0))
#print_ln_to(0, "hash[0:64] = %s", output_hash[0].reveal_to(0))
#print_ln_to(0, "hash[64:128] = %s", output_hash[1].reveal_to(0))
#print_ln_to(0, "hash[128:192] = %s", output_hash[2].reveal_to(0))
#print_ln_to(0, "hash[192:256] = %s", output_hash[3].reveal_to(0))
"""



##############################################

#       Testing section

##############################################
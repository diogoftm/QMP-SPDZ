"""
This implementation is used for the following paper:

    https://private-database-query.nature.com


Done so far:

1. Compute SHA256 with the initial registers and empty message (working)

```
sha256 = Circuit('sha256')

sb512 = sbits.get_type(512)
siv256 = sbitintvec.get_type(256)
siv512 = sbitintvec.get_type(512)

state = siv256(0x6a09e667bb67ae853c6ef372a54ff53a510e527f9b05688c1f83d9ab5be0cd19)
secret = siv512(sb512(0x1 << 511))

result = sha256(secret, state)

result.elements()[0].reveal().print_reg()
print_ln("SHA256 is %s", result.elements()[0].reveal())
```

2. Decompose and truncate `sbitint` type into `bits` (working)

By hand looks like this:

```
si8 = sbitint.get_type(8)

te100110 = si8(38)

bits = te100110.bit_decompose()
res = te100110.get_type(3).bit_compose(bits[:3])
```

Using `TruncPr` function:

```
trunc_res = te100110.TruncPr(3,0)
trunc_res_3 = te100110.TruncPr(6,4)
```

Note :: TruncPr returns a sbitint type elements as well. Also, for TruncPr(k, m), k > m, 
kth index is excluded and mth index is included.


3. Reveal sbitint to a perticular player

sbitint does not have implemented the `reveal_to()` method. Therefore, we
have to convert it into `sint` type.

```
sint_trunc_res_110 = sint.bit_compose(sint(trunc_res))
print_ln_to(0, "Now, in the sint version: %s", sint_trunc_res_110.reveal_to(0))
```

4. Print the result to file:

```
./mascot-party.x -N 2 -I -p 0 private_database_query > output_0.txt
```



To be done:

1. Hardcode some message in order to get right results
2. Input from parties.

"""




from circuit import Circuit

#sb256 = sbits.get_type(256)
#sb512 = sbits.get_type(512)
#chaining = sb256(0x6a09e667bb67ae853c6ef372a54ff53a510e527f9b05688c1f83d9ab5be0cd19)
#msg_buffer = sb512(0x6a09e667bb67ae853c6ef372a54ff53a510e527f9b05688c1f83d9ab5be0cd196a09e667bb67ae853c6ef372a54ff53a510e527f9b05688c1f83d9ab5be0cd19)

#sha256 = Circuit('sha256')

#chain_val = sha256(sbitvec([msg_buffer]), sbitvec([chaining]))
#chain_val.elements()[0].reveal().print_reg()

#print_ln("SHA256 is %s", chain_val.elements()[0].reveal())



sha256 = Circuit('sha256')

sb512 = sbits.get_type(512)
siv256 = sbitintvec.get_type(256)
siv512 = sbitintvec.get_type(512)

state = siv256(0x6a09e667bb67ae853c6ef372a54ff53a510e527f9b05688c1f83d9ab5be0cd19)
# secret = siv512(sb512(0x1 << 511)) # empty string case
secret = siv512(sb512(0x1ba))

result = sha256(secret, state)

result.elements()[0].reveal().print_reg()
print_ln("SHA256 is %s", result.elements()[0].reveal())


res = result.elements()[0]

trunc_0_128 = res.TruncPr(128,0)
trunc_128_256 = res.TruncPr(256,128)

sint_trunc_0_128 = sint.bit_compose(sint(trunc_0_128))
sint_trunc_128_256 = sint.bit_compose(sint(trunc_128_256))

print_ln_to(0, "sint of a 256 sbitint conversion. First part = %s", sint_trunc_0_128.reveal_to(0))
print_ln_to(0, "sint of a 256 sbitint conversion. Second part 101 = %s", sint_trunc_128_256.reveal_to(0))




















